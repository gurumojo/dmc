#!/bin/bash
#
# Docker Management Console
########################################################################

[ -z "$APPLICATION" ] && APPLICATION=gurumojo

build() {
	if [ -n "$IMAGE" ]; then
		if [ "$IMAGE" == "$APPLICATION" ]; then
			initialize
		elif [ "$IMAGE" != base ] && [ "$IMAGE" != template ]; then
			register && container
		else
			echo "WTF?!?"
		fi
	else
		echo 'Error: $IMAGE is required'
		exit 1
	fi
}

container() {
	cd "service/$IMAGE" && docker build --rm -t "$IMAGE:$TAG" .
}

create() {
	echo "MKDIR: service/$IMAGE"
	mkdir -p "service/$IMAGE"
	cp service/template/* "service/$IMAGE/"
}

drop() {
	if [ -n "$CONTAINER" ]; then
		docker kill "$CONTAINER" &>/dev/null
		docker rm -f "$CONTAINER" &>/dev/null
	else
		echo 'Error: $CONTAINER is required'
		exit 1
	fi
}

follow() {
	if [ -n "$CONTAINER" ]; then
		docker logs --tail 0 -f "$CONTAINER"
	else
		echo 'Error: $CONTAINER is required'
		exit 1
	fi
}

initialize() {
	if [ -n "$IMAGE" ] && [ -n "$TAG" ]; then
		cd service/base
		mv Dockerfile tmp
		sed -e "s;\(${APPLICATION^^}=\)[a-z]*;\1$TAG;" < tmp > Dockerfile
		docker build --rm -t "$IMAGE:$TAG" .
		mv tmp Dockerfile
		cd - &>/dev/null
		storage
	else
		echo 'Error: $IMAGE and $TAG are required'
		exit 1
	fi
}

purge() {
	if [ -n "$CONTAINER" ]; then
		drop "$CONTAINER"
	fi
	if [ -n "$IMAGE" ]; then
		if [ "$IMAGE" != "$APPLICATION" ]; then
			docker rmi -f $(docker images -a | grep "$IMAGE" | awk '{print $3}')
		fi
	fi
	if [ -n "$VOLUME" ]; then
		docker volume rm "$VOLUME"
	fi
	docker rmi -f $(docker images -a | grep '<none>' | awk '{print $3}')
}

query() {
	if [ -n "$VERBOSE" ]; then
		docker info
	fi
	echo
	if [ -n "$VERBOSE" ]; then
		docker images -a
	else
		docker images
	fi
	echo
	docker volume ls
	if [ -n "$VOLUME" ]; then
		docker volume inspect "$VOLUME"
	fi
	echo
	docker ps -a
	echo
}

register() {
	if [ -n "$IMAGE" ] && [ -n "$TAG" ]; then
		echo "REGISTER: $IMAGE:$TAG"
		(( $(ls -1 service | grep -c "^$IMAGE\$") )) || create
		sed -e "s;\($APPLICATION:\)[a-z]*;\1$TAG;" < service/template/Dockerfile > "service/$IMAGE/Dockerfile"
	else
		echo 'Error: $IMAGE and $TAG are required'
		exit 1
	fi
}

reset() {
	drop
	start
}

shell() {
	if [ -n "$CONTAINER" ]; then
		docker exec -it "$CONTAINER" bash
	else
		echo 'Error: $CONTAINER is required'
		exit 1
	fi
}

start() {
	if [ -n "$CONTAINER" ] && [ -n "$IMAGE" ] && [ -n "$PORT" ] && [ -n "$TAG" ]; then
		if [ -n "$VOLUME" ]; then
			docker run -d -p "$PORT:80" --name="$CONTAINER" -v "$VOLUME:/opt/$APPLICATION" --volumes-from="$TAG.etc:ro" "$IMAGE:$TAG"
		else
			docker run -d -p "$PORT:80" --name="$CONTAINER" --volumes-from="$TAG.etc:ro" "$IMAGE:$TAG"
		fi
		sleep 1 && curl "http://0.0.0.0:$PORT/"; echo; echo
	else
		echo 'Error: $CONTAINER, $IMAGE, $PORT, $TAG are required'
		exit 1
	fi
}

storage() {
	for DIR in ${SHARES[@]}; do
		docker create -v "/opt/$APPLICATION/$DIR" --name "$TAG.$DIR" "$IMAGE:$TAG" /bin/true
		tar cf "var/$DIR.tar" "$DIR/"
		docker cp - "$TAG.$DIR:/opt/$APPLICATION/" < "var/$DIR.tar"
	done
}


while [ "$#" -gt 0 ]; do
	case "$1" in
		build|-b|--build) COMMAND=build; shift 1;;
		drop|-d|--drop) COMMAND=drop; shift 1;;
		follow|-f|--follow) COMMAND=follow; shift 1;;
		help|-h|--help) COMMAND=help; shift 1;;
		purge|-x|--purge) COMMAND=purge; shift 1;;
		query|-q|--query) COMMAND=query; shift 1;;
		reset|-r|--reset) COMMAND=reset; shift 1;;
		shell|-s|--shell) COMMAND=shell; shift 1;;
		start|-a|--start) COMMAND=start; shift 1;;

		-c) CONTAINER="$2"; [ "$#" -gt 1 ] && shift 2 || shift 1;;
		-i) IMAGE="$2"; [ "$#" -gt 1 ] && shift 2 || shift 1;;
		-p) PORT="$2"; [ "$#" -gt 1 ] && shift 2 || shift 1;;
		-t) TAG="$2"; [ "$#" -gt 1 ] && shift 2 || shift 1;;
		-v) VOLUME="$2"; [ "$#" -gt 1 ] && shift 2 || shift 1;;

		--container=*) CONTAINER="${1#*=}"; shift 1;;
		--image=*) IMAGE="${1#*=}"; shift 1;;
		--tag=*) TAG="${1#*=}"; shift 1;;
		--volume=*) VOLUME="${1#*=}"; shift 1;;

		--verbose) VERBOSE=true; shift 1;;

		--container|--image|--tag|--volume) echo "$1 requires an argument" >&2; exit 1;;
		-*) echo "unknown option: $1" >&2; exit 1;;
		*) echo "unknown argument: $1" >&2; exit 1;;
	esac
done


if [ -n "$VERBOSE" ]; then
	echo
	echo "Docker Management Console: $COMMAND"
	echo
fi

case "$COMMAND" in

	build) build ;;

	drop) [ -n "$VERBOSE" ] && drop || drop 2>/dev/null ;;

	follow) follow ;;

	purge) [ -n "$VERBOSE" ] && purge || purge 2>/dev/null ;;

	query) query ;;

	reset) [ -n "$VERBOSE" ] && reset || reset 2>/dev/null ;;

	shell) shell ;;

	start) start ;;

	help) ;&
	*)
		echo "Usage:"
		echo "	# $0 <command> [ <option> [ <option> [...] ] ]"
		echo
		if [ -n "$VERBOSE" ]; then
			echo "Commands:"
			echo "	-a  --start   activate a named container"
			echo "	-b  --build   create a tagged image"
			echo "	-d  --drop    delete a named container"
			echo "	-f  --follow  tail logs from a named container"
			echo "	-h  --help    show this usage information"
			echo "	-q  --query   show images, containers, stats, volumes"
			echo "	-r  --reset   replace a named container"
			echo "	-s  --shell   command line interface on a named container"
			echo "	-x  --purge   destroy named images, containers, volumes"
			echo
			echo "Options:"
			echo "	-c <string> | --container=<string>  docker container name"
			echo "	-i <string> | --image=<string>      docker image name"
			echo "	-p <number> | --port=<number>       host port for binding"
			echo "	-t <string> | --tag=<string>        docker image tag"
			echo "	-v <string> | --volume=<string>     docker volume name"
			echo
		fi
		echo "Extra:"
		echo "	--verbose     include this argument for detailed output"
		echo
	;;
esac
