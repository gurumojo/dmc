#!/bin/bash
#
# DMC Restart Script
########################################################################

drop() {
	echo
	echo "DROP: $CONTAINER $IMAGE:$TAG"
	if [ -n "$CONTAINER" ]; then
		docker kill "$CONTAINER" &>/dev/null
		docker rm -f "$CONTAINER" &>/dev/null
	else
		return 1
	fi
}

exists() {
	(( $(echo "$DOCKER_ACTIVE" | grep -c "$CONTAINER\$") )) || return 1
}

fail() {
	echo "FAIL: $CONTAINER $1"
}

initialize() {
	CONFIG=$(CONTAINER="$1" bin/import)
	. "$CONFIG" && rm "$CONFIG"
	validate && route
}

inspect() {
	(( $(echo "$DOCKER_IMAGES" | grep -c "^$IMAGE:$TAG\$") )) && return 0
	fail "base image missing" && return 1
}

restart() {
	echo
	echo "RESTART: $CONTAINER"
	drop && start
}

route() {
	exists && running && fail "already running" && return 1
	stopped && restart && return 0
	start
}

running() {
	(( $(echo "$RUNNING" | grep -c "$CONTAINER\$") )) || return 1
}

start() {
	echo
	echo "START: $CONTAINER $IMAGE:$TAG"
	CMD="docker run -d -p $PORT:80 --name $CONTAINER --network $APPLICATION"
	[ -n "$VOLUME" ] && CMD="$CMD -v $VOLUME:/opt/$APPLICATION"
	IFS=',' read -ra IMPORTS <<< "$DEPENDENCIES"
	for IMPORT in $"${IMPORTS[@]}"; do
		CMD="$CMD --volumes-from=$TAG.$IMPORT:ro"
	done
	CMD="$CMD $IMAGE:$TAG"
	echo "EXEC: $CMD"
	$CMD
}

stopped() {
	running && return 1 || exists || return 1
}

storage() {
	if [ "$ENVIRONMENT" == "development" ]; then
		docker run -d -p 6379:6379 --name "$ENVIRONMENT.db" --network "$APPLICATION" -v "$ENVIRONMENT-db:/data" redis:alpine
	else
		docker run -d --name "$ENVIRONMENT.db" --network "$APPLICATION" -v "$ENVIRONMENT-db:/data" redis:alpine
	fi
}

validate() {
	[ -z "$CONTAINER" ] && echo 'Error: $CONTAINER is required'
	[ -z "$IMAGE" ] && echo 'Error: $IMAGE is required'
	[ -z "$PORT" ] && echo 'Error: $PORT is required'
	[ -z "$TAG" ] && echo 'Error: $TAG is required'
	[ -n "$CONTAINER" ] && [ -n "$IMAGE" ] && [ -n "$PORT" ] && [ -n "$TAG" ] || return 1
	#inspect || return 1
	return 0
}


[ -n "$VERBOSE" ] && echo "WAKING UP..."

# source configuration
. bin/env

# activate databases
for ENVIRONMENT in ${ENVIRONMENTS[@]}; do
	storage
done

# activate containers
for CONTAINER in ${CONTAINERS[@]}; do
	initialize "$CONTAINER"
done

